type: edu
files:
  - name: src/mealplanner/Main.java
    visible: true
    text: |-
      package mealplanner;
      
      public class Main {
        public static void main(String[] args) {
          System.out.println("Hello World!");
        }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      repositories {
          mavenCentral()
      }
      
      dependencies {
          implementation 'org.postgresql:postgresql:42.2.27'
      }
    learner_created: false
  - name: test/MealPlannerTests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.sql.*;
      import java.util.*;
      
      class Column {
        public String first;
        public String second;
      
        public Column(String first, String second) {
          this.first = first;
          this.second = second;
        }
      
        @Override
        public boolean equals(Object o) {
          if (this == o) return true;
          if (o == null || getClass() != o.getClass()) return false;
          Column column = (Column) o;
          return Objects.equals(first, column.first) && Objects.equals(second, column.second);
        }
      
        @Override
        public int hashCode() {
          return Objects.hash(first, second);
        }
      }
      
      class dbTable {
        String name;
        List<Column> columnNameType;
      
        public dbTable(String name, List<Column> columnNameType) {
          this.name = name;
          this.columnNameType = columnNameType;
        }
      }
      
      class MyMealTestData {
        String mealCategory;
        String mealName;
        String[] ingredients;
      
        MyMealTestData(String mealCategory, String mealName, String[] ingredients) {
          this.mealCategory = mealCategory;
          this.mealName = mealName;
          this.ingredients = ingredients;
        }
      }
      
      public class MealPlannerTests extends StageTest {
      
        static final String DB_URL = "jdbc:postgresql:meals_db";
        static final String USER = "postgres";
        static final String PASS = "1111";
      
        String[] days = new String[]{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
      
        static final MyMealTestData[] mealsList = new MyMealTestData[]{
                new MyMealTestData("breakfast", "scrambled eggs", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("breakfast", "sandwich", new String[]{"bread", "cheese", "ham"}),
                new MyMealTestData("breakfast", "oatmeal", new String[]{"oats", "milk", "banana", "peanut butter"}),
                new MyMealTestData("breakfast", "english breakfast", new String[]{"eggs", "sausages", "bacon", "tomatoes",
                        "bread"}),
                new MyMealTestData("lunch", "sushi", new String[]{"salmon", "rice", "avocado"}),
                new MyMealTestData("lunch", "chicken salad", new String[]{"chicken", "lettuce", "tomato", "olives"}),
                new MyMealTestData("lunch", "omelette", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("lunch", "salad", new String[]{"lettuce", "tomato", "onion", "cheese", "olives"}),
                new MyMealTestData("dinner", "pumpkin soup", new String[]{"pumpkin", "coconut milk", "curry", "carrots"}),
                new MyMealTestData("dinner", "beef steak", new String[]{"beef steak"}),
                new MyMealTestData("dinner", "pizza", new String[]{"flour", "tomato", "cheese", "salami"}),
                new MyMealTestData("dinner", "tomato soup", new String[]{"tomato", "orzo"})
        };
      
        void checkTableSchema(List<dbTable> tables) {
          try {
            Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
            DatabaseMetaData meta = connection.getMetaData();
            for (dbTable table : tables) {
              ResultSet tableMeta = meta.getTables(null, null, table.name, null);
              if (!tableMeta.next() || !table.name.equalsIgnoreCase(tableMeta.getString("TABLE_NAME"))) {
                throw new WrongAnswer("The table \"" + table.name + "\" doesn't exist.");
              }
              ResultSet columns = meta.getColumns(null, null, table.name, null);
              List<Column> columnsData = new ArrayList<>();
              while (columns.next()) {
                Column column = new Column(
                        columns.getString("COLUMN_NAME").toLowerCase(),
                        columns.getString("TYPE_NAME").toLowerCase());
                columnsData.add(column);
              }
              for (Column c : table.columnNameType) {
                if (!columnsData.contains(c)) {
                  for (Column c2 : columnsData) {
                    if (c.first.equals(c2.first)) {
                      throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" is of the " +
                              "wrong type.");
                    }
                  }
                  throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" doesn't exist.");
                }
              }
            }
            connection.close();
          } catch (Exception e) {
            throw new WrongAnswer("An exception was thrown, while trying to check the database schema - " + e.getMessage());
          }
        }
      
        void checkConnection() {
          try {
            Class.forName("org.postgresql.Driver");
          } catch (ClassNotFoundException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. PostgreSQL JDBC Driver is " +
                    "not found.");
          }
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (SQLException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          if (connection == null) {
            throw new WrongAnswer("Failed to make connection to database");
          }
        }
      
        @DynamicTest(order = 1)
        public CheckResult normalExe12Test() {
      
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, exit)" +
                    "?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 2)
        CheckResult normalExe13Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("sushi", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("salmon, rice, avocado", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("omelette", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("eggs, milk, cheese", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("breakfast", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("oatmeal", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("oats, milk, banana, peanut butter", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 3)
        CheckResult normalExe14Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("brunch", "Wrong meal category! Choose from: breakfast, lunch, dinner."))
              return CheckResult.wrong("Wrong output after the input of a category that doesn't exist.");
      
            if (!co.input("dinner", "No meals found."))
              return CheckResult.wrong("Wrong output for a category with no added meals.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 4)
        CheckResult normalExe15Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
      
            for (MyMealTestData meal : mealsList) {
              if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, " +
                        "dinner)?\"");
      
              if (!co.input(meal.mealCategory, "Input the meal's name:"))
                return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
              if (!co.input(meal.mealName, "Input the ingredients:"))
                return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
              if (!co.input(String.join(",", meal.ingredients), "The meal has been added!"))
                return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
              if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
                return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                        "exit)?\"");
      
            }
      
            co.getNextOutput("plan");
            int index = 0;
            for (String day : days) {
              if (!co.inputNext(day))
                return CheckResult.wrong("Your output should contain \"" + day + "\"");
      
              String[] categories = new String[]{"breakfast", "lunch", "dinner"};
              String[][] alphabetic = {
                      new String[]{"english breakfast", "oatmeal", "sandwich", "scrambled eggs"},
                      new String[]{"chicken salad", "omelette", "salad", "sushi"},
                      new String[]{"beef steak", "pizza", "pumpkin soup", "tomato soup"}
              };
              for (int i = 0; i < 3; i++) {
                String category = categories[i];
                if (!co.inputNext(alphabetic[i]))
                  return CheckResult.wrong("Make sure that formatting of your output is similar to the one in the example. " +
                          "Also, your output should contain the meals in alphabetic order.");
      
                if (!co.inputNext("Choose the " + category + " for " + day + " from the list above:"))
                  return CheckResult.wrong("Your output should contain the prompt for the " + category + " meal.");
      
                if (!co.input("nonExistMeal", "This meal doesn’t exist. Choose a meal from the list above."))
                  return CheckResult.wrong("Your output should contain \"This meal doesn’t exist. Choose a meal from the " +
                          "list above.\"");
      
                co.getNextOutput(((MyMealTestData) (Arrays.stream(mealsList).filter(x -> x.mealCategory.equals(category)).toArray()[index % 4])).mealName);
              }
              if (!co.inputNext("Yeah! We planned the meals for " + day + "."))
                return CheckResult.wrong("Your output should contain \"Yeah! We planned the meals for " + day + ".\".");
              index++;
            }
      
            String[] planPrintout = new String[]{"Monday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin " +
                    "soup",
                    "Tuesday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Wednesday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza",
                    "Thursday", "Breakfast: english breakfast", "Lunch: salad", "Dinner: tomato soup",
                    "Friday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin soup",
                    "Saturday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Sunday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza"};
      
            for (String line : planPrintout) {
              if (!co.inputNext(line))
                return CheckResult.wrong("Your output should contain \"" + line + "\".");
            }
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
      
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
      }
      
      
      class CheckOutput {
        private TestedProgram main = new TestedProgram();
        private int position = 0;
        private boolean caseInsensitive = true;
        private boolean trimOutput = true;
        private List<String> arguments = new ArrayList<>();
        private boolean isStarted = false;
        private String lastOutput = "";
      
        private boolean checkOutput(String outputString, String... checkStr) {
          int searchPosition = position;
          for (String cStr : checkStr) {
            String str = caseInsensitive ? cStr.toLowerCase() : cStr;
            int findPosition = outputString.indexOf(str, searchPosition);
            if (findPosition == -1) return false;
            if (!outputString.substring(searchPosition, findPosition).isBlank()) return false;
            searchPosition = findPosition + str.length();
          }
          position = searchPosition;
          return true;
        }
      
        public boolean start(String... checkStr) {
          if (isStarted)
            return false;
          var outputString = main.start(arguments.toArray(new String[]{}));
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          isStarted = true;
          return checkOutput(outputString, checkStr);
        }
      
        public void stop() {
          main.stop();
        }
      
        public boolean input(String input, String... checkStr) {
          if (main.isFinished()) return false;
          String outputString = main.execute(input);
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          position = 0;
          return checkOutput(outputString, checkStr);
        }
      
        public boolean inputNext(String... checkStr) {
          String outputString = lastOutput;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          return checkOutput(outputString, checkStr);
        }
      
        public String getNextOutput(String input) {
          if (main.isFinished()) return "";
          String outputString = main.execute(input);
          lastOutput = outputString;
          position = 0;
          return outputString;
        }
      
        public String getLastOutput() {
          return lastOutput;
        }
      
        public boolean programIsFinished() {
          return main.isFinished();
        }
      
        public void setArguments(String... arguments) {
          this.arguments = Arrays.stream(arguments).toList();
        }
      
        public void setCaseInsensitive(boolean caseInsensitive) {
          this.caseInsensitive = caseInsensitive;
        }
      
        public void setTrimOutput(boolean trimOutput) {
          this.trimOutput = trimOutput;
        }
      }
    learner_created: false
  - name: src/mealplanner/service/MealService.java
    visible: true
    text: |
      package mealplanner.service;
      
      import mealplanner.dao.MealDAO;
      import mealplanner.model.Meal;
      import mealplanner.model.MealCategory;
      
      import java.util.List;
      
      public class MealService {
          private final MealDAO mealDAO;
          public MealService(MealDAO mealDAO) {
              this.mealDAO = mealDAO;
          }
      
          public void addMeal(Meal meal) {
              mealDAO.createAMeal(meal);
          }
      
          public List<Meal> getAllMeals() {
              return mealDAO.getAllMeals();
          }
      
          public List<Meal> getMealsByCategory(MealCategory category){
              return mealDAO.getMealsByCategory(category);
          }
      }
    learner_created: true
  - name: src/mealplanner/model/MealOption.java
    visible: true
    text: |
      package mealplanner.model;
      
      public enum MealOption {
          ADD,
          SHOW,
          EXIT
      }
    learner_created: true
  - name: src/mealplanner/db/DatabaseService.java
    visible: true
    text: |
      package mealplanner.db;
      
      import java.sql.Connection;
      import java.sql.DriverManager;
      import java.sql.SQLException;
      import java.sql.Statement;
      
      public class DatabaseService {
          final static String DB_URL = "jdbc:postgresql:meals_db";
          final static String USER = "postgres";
          final static String PASS = "1111";
          private static Connection connection;
          // Creates a DB Connection
          public static Connection connect() throws SQLException {
              if(connection == null || connection.isClosed()) {
                  connection = DriverManager.getConnection(DB_URL, USER, PASS);
                  initializeDatabase(connection);
              }
              return connection;
          }
          public static void disconnect() throws SQLException {
              if (connection != null && !connection.isClosed()) {
                  connection.close();
              }
          }
      
          // Init DB with meals and ingredients tables
          public static void initializeDatabase(Connection connection) {
              try (Statement statement = connection.createStatement()) {
                  statement.executeUpdate("CREATE TABLE IF NOT EXISTS meals(" +
                          "meal_id INTEGER PRIMARY KEY," +
                          "category VARCHAR(30) NOT NULL," +
                          "meal VARCHAR(30) NOT NULL)");
      
                  statement.executeUpdate("CREATE TABLE IF NOT EXISTS ingredients(" +
                          "ingredient_id INTEGER PRIMARY KEY," +
                          "meal_id INTEGER," +
                          "ingredient VARCHAR(100) NOT NULL)");
              } catch (SQLException e) {
                  e.printStackTrace();
              }
          }
      }
    learner_created: true
  - name: src/mealplanner/model/MealCategory.java
    visible: true
    text: |
      package mealplanner.model;
      
      public enum MealCategory {
          BREAKFAST,
          LUNCH,
          DINNER;
      
          @Override
          public String toString() {
              // Return the category name in lowercase
              return name().toLowerCase();
          }
      }
    learner_created: true
  - name: src/mealplanner/dao/IngredientDAO.java
    visible: true
    text: |
      package mealplanner.dao;
      
      import mealplanner.model.Ingredient;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      
      public class IngredientDAO {
          private final Connection connection;
      
          public IngredientDAO(Connection connection) {
              this.connection = connection;
          }
          public List<Ingredient> getIngredientByMealId(int mealId) {
              List<Ingredient> allIngredients = new ArrayList<>();
              String insertSql = "SELECT * FROM ingredients WHERE meal_id = ?";
              try (PreparedStatement preparedStatement = connection.prepareStatement(insertSql)) {
                  preparedStatement.setInt(1, mealId);
                  ResultSet ingredients = preparedStatement.executeQuery();
      
                  while (ingredients.next()) {
                      String ingredientName = ingredients.getString("ingredient");
                      allIngredients.add(new Ingredient(ingredientName));
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              return allIngredients;
          }
          public void addIngredients(List<Ingredient> ingredients, int mealId) {
              String insertSql = "INSERT INTO ingredients (ingredient_id, meal_id, ingredient) VALUES (?, ?, ?)";
              try (PreparedStatement preparedStatement = connection.prepareStatement(insertSql)) {
                  int nextIngredientId = getLastIngredientId() + 1; // Holt den nächsten verfügbaren Wert
                  for (Ingredient ingredient : ingredients) {
                      int ingredientsId = nextIngredientId++;
                      preparedStatement.setInt(1, ingredientsId);
                      preparedStatement.setInt(2, mealId);
                      preparedStatement.setString(3, ingredient.getIngredientName());
                      preparedStatement.addBatch();
                  }
                  preparedStatement.executeBatch();
              } catch (SQLException e) {
                  e.printStackTrace();
              }
          }
      
          private int getLastIngredientId() throws SQLException {
              String query = "SELECT MAX(ingredient_id) FROM ingredients";
              Statement statement = connection.createStatement();
              ResultSet resultSet = statement.executeQuery(query);
      
              int lastPrimaryKeyValue = 0;
              if (resultSet.next()) {
                  lastPrimaryKeyValue = resultSet.getInt(1);
              }
              return lastPrimaryKeyValue;
          }
      }
    learner_created: true
  - name: src/mealplanner/model/Ingredient.java
    visible: true
    text: |
      package mealplanner.model;
      
      public class Ingredient {
          private String ingredientName;
      
          public Ingredient(String ingredientName) {
              this.ingredientName = ingredientName;
          }
      
          public String getIngredientName() {
              return ingredientName;
          }
      
          public void setIngredient(String ingredientName) {
              this.ingredientName = ingredientName;
          }
      
      }
    learner_created: true
  - name: src/mealplanner/dao/MealDAO.java
    visible: true
    text: |
      package mealplanner.dao;
      
      import mealplanner.model.Ingredient;
      import mealplanner.model.Meal;
      import mealplanner.model.MealCategory;
      import mealplanner.ui.MealAppUI;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      
      public class MealDAO {
          private final IngredientDAO ingredientDAO;
          private final Connection connection;
      
          public MealDAO(IngredientDAO ingredientDAO, Connection connection) {
              this.ingredientDAO = ingredientDAO;
              this.connection = connection;
          }
          public List<Meal> getAllMeals() {
              List<Meal> allMeals = new ArrayList<>();
              try (Statement statement = connection.createStatement()) {
                  try (ResultSet meals = statement.executeQuery("SELECT * FROM meals")) {
                      while (meals.next()) {
                          int mealId = meals.getInt("meal_id");
                          String mealName = meals.getString("meal");
                          String category = meals.getString("category");
                          List<Ingredient> ingredients = ingredientDAO.getIngredientByMealId(mealId);
                          allMeals.add(new Meal(mealName, MealAppUI.validateCategory(category), ingredients));
                      }
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              return allMeals;
          }
          public void createAMeal(Meal meal) {
              String insertSql = "INSERT INTO meals (meal_id, category, meal) VALUES (?, ?, ?)";
      
              try (PreparedStatement preparedStatement = connection.prepareStatement(insertSql, new String[]{"meal_id"})) {
                  int mealId = getLastMealId() + 1;
                  preparedStatement.setInt(1, mealId);
                  preparedStatement.setString(2, meal.getCategory().toString());
                  preparedStatement.setString(3, meal.getName());
                  preparedStatement.executeUpdate();
                  ingredientDAO.addIngredients(meal.getIngredients(), mealId);
              } catch (SQLException e) {
                  e.printStackTrace();
              }
          }
          private int getLastMealId() throws SQLException {
              String query = "SELECT MAX(meal_id) FROM meals";
              Statement statement = connection.createStatement();
              ResultSet resultSet = statement.executeQuery(query);
      
              int lastPrimaryKeyValue = 0;
              if (resultSet.next()) {
                  lastPrimaryKeyValue = resultSet.getInt(1);
              }
              return lastPrimaryKeyValue;
          }
      
          public List<Meal> getMealsByCategory(MealCategory mealCategory) {
              List<Meal> allFoundMeals = new ArrayList<>();
              String query = "SELECT * FROM meals WHERE category = ? ORDER BY category";
              try(PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                  preparedStatement.setString(1, mealCategory.toString());
                  try (ResultSet meals = preparedStatement.executeQuery()) {
                      while (meals.next()) {
                          int mealId = meals.getInt("meal_id");
                          String mealName = meals.getString("meal");
                          String category = meals.getString("category");
                          List<Ingredient> ingredients = ingredientDAO.getIngredientByMealId(mealId);
                          allFoundMeals.add(new Meal(mealName, MealAppUI.validateCategory(category), ingredients));
                      }
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (SQLException e) {
                  e.printStackTrace();
              }
              return allFoundMeals;
          }
      }
    learner_created: true
  - name: src/mealplanner/model/Meal.java
    visible: true
    text: |
      package mealplanner.model;
      
      import java.util.List;
      
      public class Meal {
          private String name;
          private MealCategory category;
          private List<Ingredient> ingredients;
      
      
          public Meal(String name, MealCategory category, List<Ingredient> ingredients) {
              this.name = name;
              this.category = category;
              this.ingredients = ingredients;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public MealCategory getCategory() {
              return category;
          }
      
          public void setCategory(MealCategory category) {
              this.category = category;
          }
      
          public List<Ingredient> getIngredients() {
              return ingredients;
          }
      
          public void setIngredients(List<Ingredient> ingredients) {
              this.ingredients = ingredients;
          }
      }
    learner_created: true
  - name: src/mealplanner/ui/MealAppUI.java
    visible: true
    text: |
      package mealplanner.ui;
      import mealplanner.model.Ingredient;
      import mealplanner.model.Meal;
      import mealplanner.model.MealCategory;
      import mealplanner.model.MealOption;
      import mealplanner.service.MealService;
      
      import java.sql.SQLException;
      import java.util.Arrays;
      import java.util.List;
      import java.util.Scanner;
      import java.util.stream.Collectors;
      import java.util.stream.IntStream;
      
      public class MealAppUI {
      
          private final MealService mealService;
          public MealAppUI(MealService mealService) {
              this.mealService = mealService;
          }
      
          public void startApp() throws SQLException {
              Scanner scanner = new Scanner(System.in);
              boolean exit = false;
              while (!exit) {
                  MealOption mealOption = getMealOption(scanner);
      
                  switch (mealOption) {
                      case ADD -> addMealUI(scanner);
                      case SHOW -> showMealUI(scanner);
                      case EXIT -> {
                          System.out.println("Bye!");
                          exit = true;
                      }
                  }
              }
              scanner.close();
          }
      
          public void addMealUI(Scanner scanner) {
              System.out.println("Which meal do you want to add (breakfast, lunch, dinner)?");
              MealCategory mealCategory = getValidMealCategory(scanner);
              System.out.println("Input the meal's name:");
              String mealName = checkFormat("^[A-Za-z]+( [A-Za-z]+)*$", scanner);
              System.out.println("Input the ingredients:");
              String ingredients = checkFormat("^([A-Za-z]+(?:[ ]?[A-Za-z]+)*)(?:,[ ]*([A-Za-z]+(?:[ ]?[A-Za-z]+)*))*$", scanner);
              List<Ingredient> ingredientList = Arrays.stream(ingredients.split(","))
                      .map(Ingredient::new)
                      .collect(Collectors.toList());
              System.out.println("The meal has been added!");
              Meal meal = new Meal (mealName, mealCategory, ingredientList);
              mealService.addMeal(meal);
          }
      
          // Prints all saved Meals
          public void showMealUI(Scanner scanner) {
              System.out.println("Which category do you want to print (breakfast, lunch, dinner)?");
              MealCategory mealCategory = getValidMealCategory(scanner);
              List<Meal> mealList = mealService.getMealsByCategory(mealCategory);
              if (mealList.isEmpty()) {
                  System.out.println("No meals found.");
              } else {
                  System.out.printf("Category: %s%n%n", mealCategory.toString());
                  IntStream.range(0, mealList.size()).forEach(index -> {
                      Meal meal = mealList.get(index);
                      System.out.printf("Name: %s%n", meal.getName());
                      System.out.println("Ingredients:");
                      meal.getIngredients().forEach(ingredient -> {
                          System.out.println(ingredient.getIngredientName());
                      });
      
                      if (index < mealList.size() - 1) {
                          System.out.println();
                      }
                  });
              }
          }
      
          // Read-in the selected Option (add, show, exit)
          private MealOption getMealOption(Scanner scanner) {
              MealOption mealOption = null;
      
              while (mealOption == null) {
                  System.out.println("What would you like to do (add, show, exit)?");
                  String option = scanner.nextLine().toLowerCase();
                  mealOption = validateOption(option);
              }
      
              return mealOption;
          }
      
          // Checks if the Option Input is valid
          private MealOption validateOption(String input) {
              return switch (input.toLowerCase()) {
                  case "add" -> MealOption.ADD;
                  case "show" -> MealOption.SHOW;
                  case "exit" -> MealOption.EXIT;
                  default -> null;
              };
          }
          // Checks the Inputs of the Meal properties
          public String checkFormat(String regEx, Scanner scanner) {
              String input;
              do {
                  input = scanner.nextLine();
                  if (input.isEmpty() || !input.matches(regEx)) {
                      System.out.println("Wrong format. Use letters only!");
                  }
              } while (input.isEmpty() || !input.matches(regEx));
              return input;
          }
      
          // Read-in the Meal Category and checks if it is valid
          public MealCategory getValidMealCategory(Scanner scanner) {
              MealCategory mealCategory = null;
      
              while (mealCategory == null) {
                  String mealTypeInput = scanner.nextLine().trim();
                  mealCategory = validateCategory(mealTypeInput);
              }
      
              return mealCategory;
          }
      
          public static MealCategory validateCategory(String input) {
              return switch (input.toLowerCase()) {
                  case "breakfast" -> MealCategory.BREAKFAST;
                  case "lunch" -> MealCategory.LUNCH;
                  case "dinner" -> MealCategory.DINNER;
                  default -> {
                      System.out.println("Wrong meal category! Choose from: breakfast, lunch, dinner.");
                      yield null;
                  }
              };
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/25575#comment
status: Unchecked
record: 5
